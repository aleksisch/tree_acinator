#include <iostream>
#include <vector>
#include <random>
#include <string>

const int64_t kPrimeMod = 2000000011;

class HashFunction {
public:
    HashFunction(int64_t angular_coeff = 1, int64_t shift_coeff = 0);

    int64_t operator()(uint64_t x) const;

    static HashFunction GenerateRandom(std::mt19937_64 &generator);

private:
    int64_t angular_coeff_;
    int64_t shift_coeff_;
};

class Bucket {
public:
    void Initialize(const std::vector<int64_t> &numbers,
        std::mt19937_64 &generator);
    bool Contains(int64_t number) const;
private:
    HashFunction hash_;
    std::vector<int64_t> data_;

    void FillBucket(const std::vector<int64_t> &numbers);
    bool HasCollisions(const std::vector<int64_t> &numbers);

    HashFunction FindHash(const std::vector<int64_t> &numbers, std::mt19937_64 &generator);
};

class FixedSet {
public:
    void Initialize(const std::vector<int> &numbers);
    bool Contains(int64_t number) const;
private:
    std::vector<Bucket> buckets_;
    HashFunction hash_function_;

    static HashFunction FindHash(const std::vector<int> &numbers, std::mt19937_64 &generator);
    void FillHashtable(const std::vector<int> &numbers, std::mt19937_64 &generator);
    static HashFunction FindRightHashFunction(std::mt19937_64 &generator,
        const std::vector<int> &numbers);
    void InitializeBuckets(size_t num_buckets,
            std::vector<std::vector<int64_t> > buf, std::mt19937_64 &generator);

};

bool IsBucketSizeEnough(const std::vector<int> &size_of_buckets);

void UpdateSizeBuckets(const std::vector<int>& numbers, std::vector<int>& size_of_buckets,
                       size_t num_buckets, HashFunction hash_function);


HashFunction::HashFunction(int64_t angular_coeff, int64_t shift_coeff)
                            : angular_coeff_ (angular_coeff),
                              shift_coeff_ (shift_coeff) {}

HashFunction HashFunction::GenerateRandom(std::mt19937_64 &generator) {
    std::uniform_int_distribution<int64_t> distribution(1, kPrimeMod - 1);
    return HashFunction(distribution(generator), distribution(generator));
}

int64_t HashFunction::operator()(uint64_t x) const {
    return (angular_coeff_ * x + shift_coeff_) % kPrimeMod;
}

void Bucket::Initialize(const std::vector<int64_t> &numbers,
    std::mt19937_64 &generator) {
    FindHash(numbers, generator);
}

HashFunction Bucket::FindHash(const std::vector<int64_t>& numbers, std::mt19937_64 & generator)
{
    do {
        hash_ = HashFunction::GenerateRandom(generator);
        FillBucket(numbers);
    } while (HasCollisions(numbers));
    return hash_;
}

bool Bucket::Contains(int64_t number) const {
    size_t size_of_bucket = data_.size();
    if (data_.empty()) {
        return false;
    }
    int64_t pos = hash_(number) % size_of_bucket;
    return data_[pos] == number;
}

void Bucket::FillBucket(const std::vector<int64_t> &numbers) {
    size_t size_of_bucket = numbers.size();
    size_of_bucket *= size_of_bucket;
    int64_t inf = std::numeric_limits<int64_t>::max();

    data_ = std::vector<int64_t>(size_of_bucket, -inf);
    for (int64_t x : numbers) {
        int64_t pos = hash_(x) % size_of_bucket;
        data_[pos] = x;
    }
}

bool Bucket::HasCollisions(const std::vector<int64_t> &numbers) {
    if (data_.empty()) {
        return false;
    }

    for (int64_t number : numbers) {
        if (data_[hash_(number) % data_.size()] != number) {
            return true;
        }
    }
    return false;
}

void FixedSet::Initialize(const std::vector<int> &numbers) {
    std::mt19937_64 generator;
    hash_function_ = FindHash(numbers, generator);
    FillHashtable(numbers, generator);
}

bool FixedSet::Contains(int64_t number) const {
    if (buckets_.empty()) {
        return false;
    }
    int64_t num_buckets = static_cast<int64_t> (buckets_.size());
    int64_t bucket_num = hash_function_(number) % num_buckets;
    return buckets_[bucket_num].Contains(number);
}

HashFunction FixedSet::FindHash(const std::vector<int> &numbers,
    std::mt19937_64 &generator) {
    size_t num_buckets = numbers.size();

    return FindRightHashFunction(generator, numbers);
}

void FixedSet::FillHashtable(const std::vector<int> &numbers, std::mt19937_64 &generator) {
    size_t num_buckets = numbers.size();
    std::vector<std::vector<int64_t> > buf =
        std::vector<std::vector<int64_t> >(num_buckets);
    for (int64_t x : numbers) {
        buf[hash_function_(x) % num_buckets].push_back(x);
    }
    InitializeBuckets(num_buckets, buf, generator);
}

void FixedSet::InitializeBuckets(size_t num_buckets,
    std::vector<std::vector<int64_t> > buf, std::mt19937_64 &generator){
    buckets_ = std::vector<Bucket>(num_buckets);
    for (size_t ind = 0; ind < num_buckets; ++ind) {
        buckets_[ind].Initialize(buf[ind], generator);
    }
}

HashFunction FixedSet::FindRightHashFunction(
    std::mt19937_64 &generator, const std::vector<int> &numbers) {
    size_t num_buckets = numbers.size();
    HashFunction hash_function;
    std::vector<int> size_of_buckets(num_buckets);
    do {
        std::fill(size_of_buckets.begin(), size_of_buckets.end(), 0);
        size_of_buckets.assign(num_buckets, 0);
        hash_function = HashFunction::GenerateRandom(generator);
        UpdateSizeBuckets(numbers, size_of_buckets, num_buckets, hash_function);
    } while (IsBucketSizeEnough(size_of_buckets));

    return hash_function;
}

bool IsBucketSizeEnough(const std::vector<int> &size_of_buckets) {
    size_t n_buckets = size_of_buckets.size();
    size_t table_size = 0;
    for (int bucket_size : size_of_buckets) {
        table_size += bucket_size * bucket_size;
    }
    return table_size > 4 * n_buckets;
}

void UpdateSizeBuckets(const std::vector<int>& numbers, std::vector<int>& size_of_buckets,
                       size_t num_buckets, HashFunction hash_function){
    for (int64_t x : numbers) {
        ++size_of_buckets[hash_function(x) % num_buckets];
    }
}

